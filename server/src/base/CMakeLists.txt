cmake_minimum_required(VERSION 2.6)
STRING( REGEX REPLACE ".*/(.*)" "\\1" CURRENT_DIRNAME ${CMAKE_CURRENT_SOURCE_DIR} )
PROJECT(${CURRENT_DIRNAME})
message(STATUS "PROJECT: ${CURRENT_DIRNAME}")

AUX_SOURCE_DIRECTORY(./ SRC_LIST1)
AUX_SOURCE_DIRECTORY(../../../proto/gen/cpp SRC_LIST2)

SET(LIBRARY_OUTPUT_PATH ./)
#SET(EXECUTABLE_OUTPUT_PATH  ./bin)

ADD_DEFINITIONS( -g -W -Wall -D_REENTRANT -D_FILE_OFFSET_BITS=64 -DAC_HAS_INFO
-DAC_HAS_WARNING -DAC_HAS_ERROR -DAC_HAS_CRITICAL -DTIXML_USE_STL
-DAC_HAS_DEBUG -DLINUX_DAEMON
-Wno-sign-compare -Wno-deprecated -Wno-unused-parameter
-Wno-missing-field-initializers -Wno-missing-field-initializers)

SET(IMPORT_HEADER_DIR ../../3rdparty/include/)
set(PROTO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../../proto/gen/cpp)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${IMPORT_HEADER_DIR} ${PROTO_SRC_DIR})

SET(IMPORT_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../3rdparty/lib/linux64)
LINK_DIRECTORIES(${IMPORT_LIB_DIR})

ADD_LIBRARY(base STATIC ${SRC_LIST1} ${SRC_LIST2})

#ADD_XXXX必须在TARGET_LINK_LIBRARIES前面，否则会报错
#ADD_LIBRARY(${PROJECTNAME} SHARED ${SRC_LIST})
#ADD_EXECUTABLE(${PROJECTNAME} ${SRC_LIST})

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
    message(STATUS "The compiler
    ${CMAKE_CXX_COMPILER} has no C++11 support.
    Please use a different C++ compiler.")
endif()

message(STATUS " CC: ${CMAKE_C_COMPILER}")
message(STATUS "CXX: ${CMAKE_CXX_COMPILER}")
message(STATUS "CXX11 : ${COMPILER_SUPPORTS_CXX11} ")
message(STATUS "CXX0X : ${COMPILER_SUPPORTS_CXX0X} ")

TARGET_LINK_LIBRARIES(base pthread ssl crypto protobuf-lite)

